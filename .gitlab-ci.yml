
variables:
    BASE_IMAGES: 'kali-rolling kali-dev kali-last-release'
    EXTRA_IMAGES: 'kali-experimental kali-bleeding-edge'
    # At the moment we can't build Docker images for arm64,
    # cf. https://gitlab.com/gitlab-com/gl-infra/production/-/issues/5401
    #ARCHS: 'amd64 arm64 armhf'
    ARCHS: 'amd64 armhf'

stages:
    - build
    - register
    - test
    - publish

build-rootfs:
    stage: build
    image: debian:testing
    artifacts:
        paths:
            - "*.tar.xz"
            - "*.release.version"
    before_script:
        - |
          # Take a look at the surroundings
          v() { echo "==== $ $@"; "$@"; }
          echo "================================"
          v uname -a
          v cat /proc/cmdline
          v sh -c "cut -d ' ' -f 1 /proc/modules | sort -u"
          v ls -l --time-style=+ /dev
          v cat /proc/mounts
          [ -e /proc/config.gz ] && v zgrep BINFMT_MISC /proc/config.gz
          [ -e /boot/config-$(uname -r) ] && v grep BINFMT_MISC /boot/config-$(uname -r)
          echo "================================"
        - |
          # Remount /builds with the dev option if needed.
          # Since GitLab migrated to Google Container-Optimized OS & Docker 19.03.15
          # in August 2021, /builds is mounted with the option nodev, and it breaks
          # debootstrap. References:
          # * https://gitlab.com/kalilinux/build-scripts/kali-docker/-/issues/40
          # * https://gitlab.com/gitlab-com/gl-infra/production/-/issues/5184
          findmnt -no options -T . | grep -qw nodev && mount -vo remount,dev $(stat -c %m .) || true
    script:
        - |
          # Install packages
          apt-get update
          apt-get install -y arch-test binfmt-support debootstrap pixz qemu-user-static wget
        - |
          # Install Kali archive keyring
          KEYRING_PKG_URL=$(wget -nv -O - \
              https://http.kali.org/kali/dists/kali-rolling/main/binary-amd64/Packages.gz \
              | gzip -dc | grep ^Filename: | grep kali-archive-keyring | head -n 1 | awk '{print $2}')
          KEYRING_PKG_URL="https://http.kali.org/kali/$KEYRING_PKG_URL"
          wget -nv "$KEYRING_PKG_URL"
          dpkg -i kali-archive-keyring_*_all.deb
          rm kali-archive-keyring_*_all.deb
        - |
          # Enable support for additional executable binary formats
          update-binfmts --enable
          update-binfmts --display | sed -n 's/:$//p'
        - |
          # Test architectures right away
          echo "Arch test:"
          for arch in $ARCHS; do
              echo -n "* $arch: " && /usr/lib/arch-test/$arch
          done
        - |
          # Build all the rootfs
          for image in $BASE_IMAGES; do
              for arch in $ARCHS; do
                  echo "========================================"
                  echo "Building rootfs $image/$arch"
                  echo "========================================"
                  ./build-rootfs.sh "$image" "$arch"
              done
          done

build-docker-images:
    stage: register
    image: debian:testing
    dependencies:
        - build-rootfs
    artifacts:
        paths:
            - "*.conf"
    script: |
        set -e
        apt-get update
        apt-get install -y binfmt-support ca-certificates podman qemu-user-static
        update-binfmts --enable
        echo "$CI_JOB_TOKEN" | podman login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
        for image in $BASE_IMAGES; do
            for arch in $ARCHS; do
                ./docker-build.sh "$image" "$arch"
            done
        done
        for image in $EXTRA_IMAGES; do
            for arch in $ARCHS; do
                ./docker-build-extra.sh "$image" "$arch"
            done
        done

test-docker-images:
    stage: test
    image: debian:testing
    dependencies:
        - build-docker-images
    script: |
        set -e
        apt-get update
        apt-get install -y binfmt-support ca-certificates podman qemu-user-static
        update-binfmts --enable
        # Switch to iptables legacy, as long as GitLab CI doesn't support nftables.
        # Cf. https://gitlab.com/gitlab-com/gl-infra/production/-/issues/5184#note_637383773
        update-alternatives --set iptables /usr/sbin/iptables-legacy
        for image in $BASE_IMAGES $EXTRA_IMAGES; do
            for arch in $ARCHS; do
                ./docker-test.sh "$image" "$arch"
            done
        done

publish-docker-images:
    stage: publish
    image: debian:testing
    dependencies:
        - build-docker-images
    script: |
        set -e
        apt-get update
        apt-get install -y ca-certificates podman
        echo "$CI_JOB_TOKEN" | podman login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
        if [ -n "$DOCKER_HUB_ACCESS_TOKEN" ]; then
            echo "$DOCKER_HUB_ACCESS_TOKEN" | podman login -u "$DOCKER_HUB_USER" --password-stdin docker.io
        fi
        for image in $BASE_IMAGES $EXTRA_IMAGES; do
            ./docker-publish.sh "$image" "$ARCHS"
        done
        # Clean tags
        #apt-get install -y curl jq
        #for image in $BASE_IMAGES $EXTRA_IMAGES; do
        #    for arch in $ARCHS; do
        #        ./docker-cleanup.sh "$image" "$arch"
        #    done
        #done
